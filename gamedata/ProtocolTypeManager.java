package gamedata;

import gamedata.character.CharacterBaseInformations;
import gamedata.character.CharacterMinimalPlusLookInformations;
import gamedata.character.PlayerStatus;
import gamedata.context.AbstractSocialGroupInfos;
import gamedata.context.AllianceInformations;
import gamedata.context.AlliancePrismInformation;
import gamedata.context.BasicAllianceInformations;
import gamedata.context.BasicGuildInformations;
import gamedata.context.BasicNamedAllianceInformations;
import gamedata.context.EntityDispositionInformations;
import gamedata.context.FightTeamInformations;
import gamedata.context.FightTeamMemberCharacterInformations;
import gamedata.context.FightTeamMemberCompanionInformations;
import gamedata.context.FightTeamMemberInformations;
import gamedata.context.FightTeamMemberMonsterInformations;
import gamedata.context.FightTeamMemberWithAllianceCharacterInformations;
import gamedata.context.GameContextActorInformations;
import gamedata.context.GameRolePlayActorInformations;
import gamedata.context.GameRolePlayCharacterInformations;
import gamedata.context.GameRolePlayGroupMonsterInformations;
import gamedata.context.GameRolePlayHumanoidInformations;
import gamedata.context.GameRolePlayMerchantInformations;
import gamedata.context.GameRolePlayNamedActorInformations;
import gamedata.context.GameRolePlayNpcInformations;
import gamedata.context.GameRolePlayNpcWithQuestInformations;
import gamedata.context.GameRolePlayPortalInformations;
import gamedata.context.GameRolePlayPrismInformations;
import gamedata.context.GameRolePlayTaxCollectorInformations;
import gamedata.context.GroupMonsterStaticInformations;
import gamedata.context.GuildInformations;
import gamedata.context.HouseInformations;
import gamedata.context.HouseInformationsExtended;
import gamedata.context.HumanInformations;
import gamedata.context.HumanOption;
import gamedata.context.HumanOptionAlliance;
import gamedata.context.HumanOptionEmote;
import gamedata.context.HumanOptionFollowers;
import gamedata.context.HumanOptionGuild;
import gamedata.context.HumanOptionOrnament;
import gamedata.context.HumanOptionSkillUse;
import gamedata.context.HumanOptionTitle;
import gamedata.context.InteractiveElement;
import gamedata.context.InteractiveElementSkill;
import gamedata.context.InteractiveElementWithAgeBonus;
import gamedata.context.PortalInformation;
import gamedata.context.TaxCollectorStaticExtendedInformations;
import gamedata.context.TaxCollectorStaticInformations;
import gamedata.fight.FightEntityDispositionInformations;
import gamedata.fight.FightResultAdditionalData;
import gamedata.fight.FightResultExperienceData;
import gamedata.fight.FightResultFighterListEntry;
import gamedata.fight.FightResultListEntry;
import gamedata.fight.FightResultPlayerListEntry;
import gamedata.fight.GameFightAIInformations;
import gamedata.fight.GameFightCharacterInformations;
import gamedata.fight.GameFightFighterInformations;
import gamedata.fight.GameFightFighterNamedInformations;
import gamedata.fight.GameFightMinimalStats;
import gamedata.fight.GameFightMonsterInformations;
import gamedata.inventory.ObjectEffect;
import gamedata.inventory.ObjectEffectCreature;
import gamedata.inventory.ObjectEffectDate;
import gamedata.inventory.ObjectEffectDice;
import gamedata.inventory.ObjectEffectDuration;
import gamedata.inventory.ObjectEffectInteger;
import gamedata.inventory.ObjectEffectLadder;
import gamedata.inventory.ObjectEffectMinMax;
import gamedata.inventory.ObjectEffectMount;
import gamedata.inventory.ObjectEffectString;
import gamedata.maps.MapCoordinates;
import gamedata.maps.MapCoordinatesExtended;
import gamedata.parties.PartyMemberInformations;

import java.lang.reflect.Constructor;
import java.util.Hashtable;

import main.FatalError;
import utilities.ByteArray;

public class ProtocolTypeManager {
	private static Hashtable<Integer, Class<?>> types = new Hashtable<Integer, Class<?>>();
	
	static {
		//types[3] = GameRolePlayMutantInformations.class;
		types.put(6, FightTeamMemberMonsterInformations.class);
		types.put(13, FightTeamMemberCharacterInformations.class);
		types.put(16, FightResultListEntry.class);
		types.put(24, FightResultPlayerListEntry.class);
		types.put(29, GameFightMonsterInformations.class);
		types.put(31, GameFightMinimalStats.class);
		types.put(33, FightTeamInformations.class);
		types.put(36, GameRolePlayCharacterInformations.class);
		types.put(44, FightTeamMemberInformations.class);
		types.put(45, CharacterBaseInformations.class);
		types.put(46, GameFightCharacterInformations.class);
		//types[48] = GameFightTaxCollectorInformations.class;
		//types[50] = GameFightMutantInformations.class;
		types.put(60, EntityDispositionInformations.class);
		types.put(70, ObjectEffectInteger.class);
		types.put(71, ObjectEffectCreature.class);
		types.put(72, ObjectEffectDate.class);
		types.put(73, ObjectEffectDice.class);
		types.put(74, ObjectEffectString.class);
		types.put(75, ObjectEffectDuration.class);
		types.put(76, ObjectEffect.class);
		//types[77] = FriendSpouseInformations.class;
		//types[78] = FriendInformations.class;
		types.put(80, InteractiveElement.class);
		types.put(81, ObjectEffectLadder.class);
		types.put(82, ObjectEffectMinMax.class);
		//types[84] = FightResultTaxCollectorListEntry.class;
		types.put(90, PartyMemberInformations.class);
		//types[92] = FriendOnlineInformations.class;
		//types[93] = FriendSpouseOnlineInformations.class;
		//types[99] = SkillActionDescriptionCollect.class;
        //types[100] = SkillActionDescriptionCraft.class;
        //types[102] = SkillActionDescription.class;
        //types[103] = SkillActionDescriptionTimed.class;
		//types[105] = IgnoredOnlineInformations.class;
		//types[106] = IgnoredInformations.class;
		//types[107] = IdentifiedEntityDispositionInformations.class;
		types.put(111, HouseInformations.class);
		types.put(112, HouseInformationsExtended.class);
		types.put(127, GuildInformations.class);
		types.put(129, GameRolePlayMerchantInformations.class);
		//types[130] = PaddockBuyableInformations.class;
		//types[131] = PaddockPrivateInformations.class;
        //types[132] = PaddockInformations.class;
        //types[133] = PaddockAbandonnedInformations.class;
		types.put(140, GroupMonsterStaticInformations.class);
		types.put(141, GameRolePlayActorInformations.class);
		types.put(143, GameFightFighterInformations.class);
		types.put(147, TaxCollectorStaticInformations.class);
		types.put(148,GameRolePlayTaxCollectorInformations.class);
		types.put(150, GameContextActorInformations.class);
		types.put(151, GameFightAIInformations.class);
		types.put(154, GameRolePlayNamedActorInformations.class);
		types.put(156, GameRolePlayNpcInformations.class);
		types.put(157, HumanInformations.class);
		types.put(158, GameFightFighterNamedInformations.class);
		types.put(159, GameRolePlayHumanoidInformations.class);
		types.put(160, GameRolePlayGroupMonsterInformations.class);
		types.put(161, GameRolePlayPrismInformations.class);
		types.put(163, CharacterMinimalPlusLookInformations.class);
		//types[167] = TaxCollectorInformations.class;
		types.put(174, MapCoordinates.class);
		types.put(176, MapCoordinatesExtended.class);
		//types[177] = FightTeamMemberTaxCollectorInformations.class;
		types.put(179, ObjectEffectMount.class);
		//types[180] = GameRolePlayMountInformations.class;
		//types[183] = PaddockContentInformations.class;
		types.put(189, FightResultFighterListEntry.class);
		//types[190] = FightResultPvpData.class;
		types.put(191, FightResultAdditionalData.class);
		types.put(192, FightResultExperienceData.class);
		//types[193] = CharacterMinimalPlusLookAndGradeInformations.class;
		//types[203] = GameFightMonsterWithAlignmentInformations.class;
		//types[206] = AbstractFightDispellableEffect.class;
		//types[207] = FightTemporarySpellBoostEffect.class;
		//types[209] = FightTemporaryBoostEffect.class;
		//types[210] = FightTriggeredEffect.class;
		//types[211] = FightTemporaryBoostWeaponDamagesEffect.class;
		//types[214] = FightTemporaryBoostStateEffect.class;
		//types[216] = FightResultMutantListEntry.class;
		types.put(217, FightEntityDispositionInformations.class);
		types.put(219, InteractiveElementSkill.class);
        //types[220] = InteractiveElementNamedSkill.class;
		//types[356] = UpdateMountBoost.class;
		//types[357] = UpdateMountIntBoost.class;
		//types[360] = GameFightMinimalStatsPreparation.class;
		types.put(365, BasicGuildInformations.class);
		//types[366] = FightTemporarySpellImmunityEffect.class;
		//types[367] = ShortcutObject.class;
		//types[368] = ShortcutSpell.class;
		//types[369] = Shortcut.class;
		//types[370] = ShortcutObjectPreset.class;
        //types[371] = ShortcutObjectItem.class;
        //types[372] = TaxCollectorLootInformations.class;
        //types[376] = PartyInvitationMemberInformations.class;
        //types[381] = QuestActiveInformations.class;
        //types[382] = QuestActiveDetailedInformations.class;
		types.put(383, GameRolePlayNpcWithQuestInformations.class);
        //types[385] = QuestObjectiveInformations.class;
        //types[386] = QuestObjectiveInformationsWithCompletion.class;
        //types[388] = ShortcutSmiley.class;
        //types[389] = ShortcutEmote.class;
        //types[391] = PartyMemberArenaInformations.class;
        //types[392] = MapCoordinatesAndId.class;
        //types[396] = GroupMonsterStaticInformationsWithAlternatives.class;
		types.put(398, InteractiveElementWithAgeBonus.class);
		types.put(406, HumanOption.class);
		types.put(407, HumanOptionEmote.class);
		types.put(408, HumanOptionTitle.class);
		types.put(409, HumanOptionGuild.class);
		types.put(410, HumanOptionFollowers.class);
		types.put(411, HumanOptionOrnament.class);
        //types[413] = GameFightFighterLightInformations.class;
        //types[414] = PlayerStatusExtended.class;
        types.put(415, PlayerStatus.class);
        types.put(416, AbstractSocialGroupInfos.class);
        types.put(417, AllianceInformations.class);
        types.put(418, BasicNamedAllianceInformations.class);
        types.put(419, BasicAllianceInformations.class);
        //types[420] = GuildInAllianceInformations.class;
        //types[421] = AllianceFactSheetInformations.class;
        //types[422] = AlliancedGuildFactSheetInformations.class;
        //types[423] = GuildInsiderFactSheetInformations.class;
        //types[424] = GuildFactSheetInformations.class;
        types.put(425, HumanOptionAlliance.class);
        types.put(426, FightTeamMemberWithAllianceCharacterInformations.class);
        types.put(427, AlliancePrismInformation.class);
        //types[428] = PrismInformation.class;
        //types[429] = ServerSessionConstantLong.class;
        //types[430] = ServerSessionConstant.class;
        //types[431] = AllianceInsiderPrismInformation.class;
        //types[433] = ServerSessionConstantInteger.class;
        //types[434] = PrismGeolocalizedInformation.class;
        //types[435] = GuildVersatileInformations.class;
        //types[436] = ServerSessionConstantString.class;
        //types[437] = GuildInAllianceVersatileInformations.class;
        //types[438] = PrismSubareaEmptyInfo.class;
        //types[439] = FightAllianceTeamInformations.class;
        types.put(440, TaxCollectorStaticExtendedInformations.class);
        //types[444] = CharacterMinimalAllianceInformations.class;
        //types[445] = CharacterMinimalGuildInformations.class;
        //types[446] = TaxCollectorGuildInformations.class;
        //types[447] = TaxCollectorWaitingForHelpInformations.class;
        //types[448] = TaxCollectorComplementaryInformations.class;
        //types[449] = HumanOptionObjectUse.class;
        //types[450] = GameFightCompanionInformations.class;
        types.put(451, FightTeamMemberCompanionInformations.class);
        //types[454] = GameFightFighterCompanionLightInformations.class;
        //types[455] = GameFightFighterMonsterLightInformations.class;
        //types[456] = GameFightFighterNamedLightInformations.class;
        //types[457] = GameFightFighterTaxCollectorLightInformations.class;
        //types[461] = TreasureHuntStepFollowDirectionToPOI.class;
        //types[462] = TreasureHuntStepFight.class;
        //types[463] = TreasureHuntStep.class;
        //types[464] = GameRolePlayGroupMonsterWaveInformations.class;
        //types[465] = TreasureHuntStepDig.class;
        types.put(466, PortalInformation.class);
        types.put(467, GameRolePlayPortalInformations.class);
        //types[468] = TreasureHuntStepFollowDirection.class;
        //types[471] = GameRolePlayTreasureHintInformations.class;
        //types[472] = TreasureHuntStepFollowDirectionToHint.class;
        //types[474] = CharacterHardcoreOrEpicInformations.class;
        //types[482] = StatisticDataBoolean.class;
        //types[484] = StatisticData.class;
        //types[485] = StatisticDataInt.class;
        //types[486] = StatisticDataByte.class;
        //types[487] = StatisticDataString.class;
        //types[488] = StatisticDataShort.class;
        //types[489] = Idol.class;
        //types[490] = PartyIdol.class;
        //types[492] = ShortcutObjectIdolsPreset.class;
        types.put(495, HumanOptionSkillUse.class);
	}
	
	public static Object getInstance(int protocolId, ByteArray buffer) {
		Class<?> c = types.get(protocolId);
		if(c == null)
			throw new FatalError("Invalid or unhandled protocol id : " + protocolId + ".");
		else {
			Object o = null;
			Constructor<?> cons = c.getConstructors()[0];
			try {
				o = cons.newInstance(buffer);
			} catch(Exception e) {
				e.printStackTrace();
			}
			return o;
		}
	}
}