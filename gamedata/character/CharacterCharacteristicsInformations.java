package gamedata.character;

import gamedata.context.ActorExtendedAlignmentInformations;

import java.util.Vector;

import utilities.ByteArray;

public class CharacterCharacteristicsInformations {
	public double experience = 0;
	public double experienceLevelFloor = 0;
	public double experienceNextLevelFloor = 0;
	public int kamas = 0;
	public int statsPoints = 0;
	public int additionnalPoints = 0;
	public int spellsPoints = 0;
	public ActorExtendedAlignmentInformations alignmentInfos;
	public int lifePoints = 0;
	public int maxLifePoints = 0;
	public int energyPoints = 0;
	public int maxEnergyPoints = 0;
	public int actionPointsCurrent = 0;
	public int movementPointsCurrent = 0;
	public CharacterBaseCharacteristic initiative;
	public CharacterBaseCharacteristic prospecting;
	public CharacterBaseCharacteristic actionPoints;
	public CharacterBaseCharacteristic movementPoints;
	public CharacterBaseCharacteristic strength;
	public CharacterBaseCharacteristic vitality;
	public CharacterBaseCharacteristic wisdom;
	public CharacterBaseCharacteristic chance;
	public CharacterBaseCharacteristic agility;
	public CharacterBaseCharacteristic intelligence;
	public CharacterBaseCharacteristic range;
	public CharacterBaseCharacteristic summonableCreaturesBoost;
	public CharacterBaseCharacteristic reflect;
	public CharacterBaseCharacteristic criticalHit;
	public int criticalHitWeapon = 0;
	public CharacterBaseCharacteristic criticalMiss;
	public CharacterBaseCharacteristic healBonus;
	public CharacterBaseCharacteristic allDamagesBonus;
	public CharacterBaseCharacteristic weaponDamagesBonusPercent;
	public CharacterBaseCharacteristic damagesBonusPercent;
	public CharacterBaseCharacteristic trapBonus;
	public CharacterBaseCharacteristic trapBonusPercent;
	public CharacterBaseCharacteristic glyphBonusPercent;
	public CharacterBaseCharacteristic runeBonusPercent;
	public CharacterBaseCharacteristic permanentDamagePercent;
	public CharacterBaseCharacteristic tackleBlock;
	public CharacterBaseCharacteristic tackleEvade;
	public CharacterBaseCharacteristic PAAttack;
	public CharacterBaseCharacteristic PMAttack;
	public CharacterBaseCharacteristic pushDamageBonus;
	public CharacterBaseCharacteristic criticalDamageBonus;
	public CharacterBaseCharacteristic neutralDamageBonus;
	public CharacterBaseCharacteristic earthDamageBonus;
	public CharacterBaseCharacteristic waterDamageBonus;
	public CharacterBaseCharacteristic airDamageBonus;
	public CharacterBaseCharacteristic fireDamageBonus;
	public CharacterBaseCharacteristic dodgePALostProbability;
	public CharacterBaseCharacteristic dodgePMLostProbability;
	public CharacterBaseCharacteristic neutralElementResistPercent;
	public CharacterBaseCharacteristic earthElementResistPercent;
	public CharacterBaseCharacteristic waterElementResistPercent;
	public CharacterBaseCharacteristic airElementResistPercent;
	public CharacterBaseCharacteristic fireElementResistPercent;
	public CharacterBaseCharacteristic neutralElementReduction;
	public CharacterBaseCharacteristic earthElementReduction;
	public CharacterBaseCharacteristic waterElementReduction;
	public CharacterBaseCharacteristic airElementReduction;
	public CharacterBaseCharacteristic fireElementReduction;
	public CharacterBaseCharacteristic pushDamageReduction;
	public CharacterBaseCharacteristic criticalDamageReduction;
	public CharacterBaseCharacteristic pvpNeutralElementResistPercent;
	public CharacterBaseCharacteristic pvpEarthElementResistPercent;
	public CharacterBaseCharacteristic pvpWaterElementResistPercent;
	public CharacterBaseCharacteristic pvpAirElementResistPercent;
	public CharacterBaseCharacteristic pvpFireElementResistPercent;
	public CharacterBaseCharacteristic pvpNeutralElementReduction;
	public CharacterBaseCharacteristic pvpEarthElementReduction;
	public CharacterBaseCharacteristic pvpWaterElementReduction;
	public CharacterBaseCharacteristic pvpAirElementReduction;
	public CharacterBaseCharacteristic pvpFireElementReduction;
	public Vector<CharacterSpellModification> spellModifications;
	public int probationTime = 0;

	public CharacterCharacteristicsInformations(ByteArray buffer) {
		this.experience = buffer.readVarLong().toNumber();
		this.experienceLevelFloor = buffer.readVarLong().toNumber();
		this.experienceNextLevelFloor = buffer.readVarLong().toNumber();
		this.kamas = buffer.readInt();
		this.statsPoints = buffer.readVarShort();
		this.additionnalPoints = buffer.readVarShort();
		this.spellsPoints = buffer.readVarShort();
		this.alignmentInfos = new ActorExtendedAlignmentInformations(buffer);
		this.lifePoints = buffer.readVarInt();
		this.maxLifePoints = buffer.readVarInt();
		this.energyPoints = buffer.readVarShort();
		this.maxEnergyPoints = buffer.readVarShort();
		this.actionPointsCurrent = buffer.readVarShort();
		this.movementPointsCurrent = buffer.readVarShort();
		this.initiative = new CharacterBaseCharacteristic(buffer);
		this.prospecting = new CharacterBaseCharacteristic(buffer);
		this.actionPoints = new CharacterBaseCharacteristic(buffer);
		this.movementPoints = new CharacterBaseCharacteristic(buffer);
		this.strength = new CharacterBaseCharacteristic(buffer);
		this.vitality = new CharacterBaseCharacteristic(buffer);
		this.wisdom = new CharacterBaseCharacteristic(buffer);
		this.chance = new CharacterBaseCharacteristic(buffer);
		this.agility = new CharacterBaseCharacteristic(buffer);
		this.intelligence = new CharacterBaseCharacteristic(buffer);
		this.range = new CharacterBaseCharacteristic(buffer);
		this.summonableCreaturesBoost = new CharacterBaseCharacteristic(buffer);
		this.reflect = new CharacterBaseCharacteristic(buffer);
		this.criticalHit = new CharacterBaseCharacteristic(buffer);
		this.criticalHitWeapon = buffer.readVarShort();
		this.criticalMiss = new CharacterBaseCharacteristic(buffer);
		this.healBonus = new CharacterBaseCharacteristic(buffer);
		this.allDamagesBonus = new CharacterBaseCharacteristic(buffer);
		this.weaponDamagesBonusPercent = new CharacterBaseCharacteristic(buffer);
		this.damagesBonusPercent = new CharacterBaseCharacteristic(buffer);
		this.trapBonus = new CharacterBaseCharacteristic(buffer);
		this.trapBonusPercent = new CharacterBaseCharacteristic(buffer);
		this.glyphBonusPercent = new CharacterBaseCharacteristic(buffer);
		this.runeBonusPercent = new CharacterBaseCharacteristic(buffer);
		this.permanentDamagePercent = new CharacterBaseCharacteristic(buffer);
		this.tackleBlock = new CharacterBaseCharacteristic(buffer);
		this.tackleEvade = new CharacterBaseCharacteristic(buffer);
		this.PAAttack = new CharacterBaseCharacteristic(buffer);
		this.PMAttack = new CharacterBaseCharacteristic(buffer);
		this.pushDamageBonus = new CharacterBaseCharacteristic(buffer);
		this.criticalDamageBonus = new CharacterBaseCharacteristic(buffer);
		this.neutralDamageBonus = new CharacterBaseCharacteristic(buffer);
		this.earthDamageBonus = new CharacterBaseCharacteristic(buffer);
		this.waterDamageBonus = new CharacterBaseCharacteristic(buffer);
		this.airDamageBonus = new CharacterBaseCharacteristic(buffer);
		this.fireDamageBonus = new CharacterBaseCharacteristic(buffer);
		this.dodgePALostProbability = new CharacterBaseCharacteristic(buffer);
		this.dodgePMLostProbability = new CharacterBaseCharacteristic(buffer);
		this.neutralElementResistPercent = new CharacterBaseCharacteristic(buffer);
		this.earthElementResistPercent = new CharacterBaseCharacteristic(buffer);
		this.waterElementResistPercent = new CharacterBaseCharacteristic(buffer);
		this.airElementResistPercent = new CharacterBaseCharacteristic(buffer);
		this.fireElementResistPercent = new CharacterBaseCharacteristic(buffer);
		this.neutralElementReduction = new CharacterBaseCharacteristic(buffer);
		this.earthElementReduction = new CharacterBaseCharacteristic(buffer);
		this.waterElementReduction = new CharacterBaseCharacteristic(buffer);
		this.airElementReduction = new CharacterBaseCharacteristic(buffer);
		this.fireElementReduction = new CharacterBaseCharacteristic(buffer);
		this.pushDamageReduction = new CharacterBaseCharacteristic(buffer);
		this.criticalDamageReduction = new CharacterBaseCharacteristic(buffer);
		this.pvpNeutralElementResistPercent = new CharacterBaseCharacteristic(buffer);
		this.pvpEarthElementResistPercent = new CharacterBaseCharacteristic(buffer);
		this.pvpWaterElementResistPercent = new CharacterBaseCharacteristic(buffer);
		this.pvpAirElementResistPercent = new CharacterBaseCharacteristic(buffer);
		this.pvpFireElementReduction = new CharacterBaseCharacteristic(buffer);
		this.pvpNeutralElementReduction = new CharacterBaseCharacteristic(buffer);
		this.pvpEarthElementReduction = new CharacterBaseCharacteristic(buffer);
		this.pvpWaterElementReduction = new CharacterBaseCharacteristic(buffer);
		this.pvpAirElementReduction = new CharacterBaseCharacteristic(buffer);
		this.pvpFireElementReduction = new CharacterBaseCharacteristic(buffer);
		int nb = buffer.readShort();
		for(int i = 0; i < nb; ++i)
			this.spellModifications.add(new CharacterSpellModification(buffer));
		this.probationTime = buffer.readInt();
	}
}